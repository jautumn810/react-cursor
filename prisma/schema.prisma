// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  reviews       Review[]
  cart          Cart?
  wishlist      WishlistItem[]

  @@map("users")
}

// Account model for OAuth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for NextAuth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification token for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Category model
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  image       String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  products    Product[]

  @@map("categories")
}

// Product model
model Product {
  id          String    @id @default(cuid())
  name        String
  description String    @db.Text
  price       Decimal   @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  images      String[]  // Array of image URLs
  sku         String?   @unique
  barcode     String?
  weight      Float?
  dimensions  String?   // JSON string for length, width, height
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  isFeatured  Boolean   @default(false)
  slug        String    @unique
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  category    Category  @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  wishlistItems WishlistItem[]

  @@map("products")
}

// Order model
model Order {
  id            String        @id @default(cuid())
  userId        String
  orderNumber   String        @unique
  status        OrderStatus   @default(PENDING)
  total         Decimal       @db.Decimal(10, 2)
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @db.Decimal(10, 2) @default(0)
  shipping      Decimal       @db.Decimal(10, 2) @default(0)
  discount      Decimal       @db.Decimal(10, 2) @default(0)
  currency      String        @default("USD")
  
  // Shipping information
  shippingAddress Json?       // JSON object for address
  billingAddress  Json?       // JSON object for address
  
  // Payment information
  paymentMethod  String?
  paymentStatus  PaymentStatus @default(PENDING)
  stripePaymentIntentId String?
  
  // Timestamps
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  shippedAt      DateTime?
  deliveredAt    DateTime?

  // Relations
  user          User          @relation(fields: [userId], references: [id])
  items         OrderItem[]

  @@map("orders")
}

// OrderItem model
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  // Relations
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Review model
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?  @db.Text
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // One review per user per product
  @@map("reviews")
}

// Cart model
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@map("carts")
}

// CartItem model
model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int     @default(1)

  // Relations
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId]) // One cart item per product per cart
  @@map("cart_items")
}

// WishlistItem model
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // One wishlist item per user per product
  @@map("wishlist_items")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}
