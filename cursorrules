# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

1. Use `npx shadcn@latest add [component]` instead of `npx shadcn-ui@latest add [component]` when installing Shadcn UI components.
2. In Next.js 14+, page props params must be typed as a Promise. Example:
   ```typescript
   type tParams = Promise<{ id: string }>
   interface PageProps {
     params: tParams
   }
   ```
   Then await the params in the component:
   ```typescript
   export default async function Page(props: PageProps) {
     const { id } = await props.params
   }
   ```
3. Use `const session = await auth()` instead of `const session = await getServerSession(authOptions)` for Next.js authentication. The new `auth()` function is the recommended way to get the session in Next.js Auth v5.
4. When importing `useRouter` from 'next/navigation', the component must be marked as a client component using the `'use client'` directive at the top of the file, as this hook only works on the client side.

## Scratchpad

### Ecommerce Website with Admin Dashboard Development Steps

#### Phase 1: Project Setup and Configuration [ ]

**1.1 Initialize Next.js 15 Project**
- [ ] Create new Next.js 15 project with TypeScript
- [ ] Set up project structure:
  ```
  src/
  ├── app/
  │   ├── (auth)/
  │   ├── (dashboard)/
  │   ├── (home)/
  │   ├── admin/
  │   └── api/
  ├── components/
  │   ├── ui/
  │   ├── forms/
  │   ├── charts/
  │   └── layouts/
  ├── lib/
  │   ├── auth.ts
  │   ├── db.ts
  │   ├── utils.ts
  │   └── validations.ts
  ├── hooks/
  ├── stores/
  └── types/
  ```

**1.2 Install Dependencies**
- [ ] Install core dependencies:
  ```bash
  npm install @prisma/client @auth/prisma-adapter @auth/nextjs zod zustand recharts
  npm install @uploadthing/react uploadthing @stripe/stripe-js stripe
  npm install resend @radix-ui/react-icons lucide-react
  ```
- [ ] Install dev dependencies:
  ```bash
  npm install -D prisma @types/node typescript
  ```

**1.3 Configure Shadcn UI**
- [ ] Initialize Shadcn UI: `npx shadcn@latest init`
- [ ] Install essential components:
  ```bash
  npx shadcn@latest add button card input form table dialog
  npx shadcn@latest add select textarea badge avatar dropdown-menu
  npx shadcn@latest add sheet sidebar navigation-menu tabs
  npx shadcn@latest add progress alert toast popover
  ```

#### Phase 2: Database and Authentication Setup [ ]

**2.1 Database Configuration**
- [ ] Set up PostgreSQL database (local or cloud)
- [ ] Initialize Prisma: `npx prisma init`
- [ ] Create Prisma schema with models:
  ```prisma
  model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    image         String?
    role          Role      @default(USER)
    emailVerified DateTime?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    
    accounts      Account[]
    sessions      Session[]
    orders        Order[]
    reviews       Review[]
    cart          Cart?
  }

  model Product {
    id          String   @id @default(cuid())
    name        String
    description String
    price       Decimal
    images      String[]
    categoryId  String
    stock       Int
    sku         String   @unique
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    category    Category @relation(fields: [categoryId], references: [id])
    orderItems  OrderItem[]
    reviews     Review[]
  }

  model Category {
    id       String    @id @default(cuid())
    name     String
    slug     String    @unique
    image    String?
    products Product[]
  }

  model Order {
    id            String      @id @default(cuid())
    userId        String
    status        OrderStatus @default(PENDING)
    total         Decimal
    shippingAddress Json
    paymentIntent  String?
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    
    user          User        @relation(fields: [userId], references: [id])
    items         OrderItem[]
  }

  model OrderItem {
    id        String  @id @default(cuid())
    orderId   String
    productId String
    quantity  Int
    price     Decimal
    
    order     Order   @relation(fields: [orderId], references: [id])
    product   Product @relation(fields: [productId], references: [id])
  }

  model Review {
    id        String  @id @default(cuid())
    userId    String
    productId String
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
    
    user      User    @relation(fields: [userId], references: [id])
    product   Product @relation(fields: [productId], references: [id])
  }

  model Cart {
    id     String @id @default(cuid())
    userId String @unique
    items  Json   // Array of cart items
    
    user   User   @relation(fields: [userId], references: [id])
  }

  enum Role {
    USER
    ADMIN
  }

  enum OrderStatus {
    PENDING
    PROCESSING
    SHIPPED
    DELIVERED
    CANCELLED
    REFUNDED
  }
  ```

**2.2 Authentication Setup**
- [ ] Configure NextAuth.js v5:
  ```typescript
  // lib/auth.ts
  import NextAuth from "next-auth"
  import { PrismaAdapter } from "@auth/prisma-adapter"
  import { prisma } from "@/lib/db"
  import CredentialsProvider from "next-auth/providers/credentials"
  import GoogleProvider from "next-auth/providers/google"
  import bcrypt from "bcryptjs"

  export const { handlers, auth, signIn, signOut } = NextAuth({
    adapter: PrismaAdapter(prisma),
    providers: [
      GoogleProvider({
        clientId: process.env.GOOGLE_CLIENT_ID!,
        clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
      }),
      CredentialsProvider({
        name: "credentials",
        credentials: {
          email: { label: "Email", type: "email" },
          password: { label: "Password", type: "password" }
        },
        async authorize(credentials) {
          // Implement credential validation
        }
      })
    ],
    callbacks: {
      async session({ session, user }) {
        if (session.user) {
          session.user.id = user.id
          session.user.role = user.role
        }
        return session
      }
    }
  })
  ```

#### Phase 3: Core Customer Features [ ]

**3.1 Homepage and Layout**
- [ ] Create responsive header with:
  - Logo and navigation
  - Search bar with autocomplete
  - User menu (login/account)
  - Shopping cart icon
- [ ] Implement homepage with:
  - Hero banner carousel
  - Featured products grid
  - Category showcase
  - Newsletter signup
- [ ] Create footer with links and social media

**3.2 Product Catalog**
- [ ] Build product listing page with:
  - Sidebar filters (category, price, rating)
  - Search functionality
  - Sort options (price, popularity, newest)
  - Pagination
  - Product grid with cards
- [ ] Implement product detail page with:
  - Image gallery with thumbnails
  - Product information (title, price, description)
  - Add to cart functionality
  - Reviews and ratings section
  - Related products

**3.3 Shopping Cart and Checkout**
- [ ] Create cart functionality:
  - Add/remove items
  - Update quantities
  - Cart persistence (localStorage + database)
  - Cart sidebar/modal
- [ ] Implement checkout process:
  - Shipping address form
  - Payment method selection
  - Order summary
  - Stripe payment integration
  - Order confirmation

**3.4 User Dashboard**
- [ ] Create user profile page with:
  - Personal information
  - Order history
  - Saved addresses
  - Wishlist
  - Account settings

#### Phase 4: Admin Dashboard [ ]

**4.1 Admin Authentication and Layout**
- [ ] Create admin middleware for route protection
- [ ] Build admin layout with:
  - Sidebar navigation
  - Header with user info
  - Responsive design
  - Breadcrumb navigation

**4.2 Dashboard Overview**
- [ ] Create dashboard widgets:
  - Total revenue (with currency formatting)
  - Total orders (with status breakdown)
  - Total customers (with growth metrics)
  - Average order value
  - Low stock alerts
  - Recent orders table
- [ ] Implement charts using Recharts:
  - Revenue trend line chart
  - Order volume bar chart
  - Customer acquisition chart
  - Top products chart

**4.3 Product Management**
- [ ] Create product CRUD operations:
  - Product listing with search and filters
  - Add new product form
  - Edit product functionality
  - Bulk actions (delete, activate/deactivate)
  - Image upload using Uploadthing
  - Category management
- [ ] Implement inventory management:
  - Stock level tracking
  - Low stock alerts
  - Stock history

**4.4 Order Management**
- [ ] Build order management system:
  - Order listing with filters
  - Order detail view
  - Status updates
  - Invoice generation
  - Refund processing
  - Shipping tracking

**4.5 Customer Management**
- [ ] Create customer management:
  - Customer list with search
  - Customer detail view
  - Order history per customer
  - Customer analytics
  - Admin user management

#### Phase 5: Advanced Features [ ]

**5.1 Email System (Resend)**
- [ ] Set up Resend for transactional emails:
  - Order confirmation emails
  - Shipping updates
  - Password reset emails
  - Welcome emails
  - Abandoned cart reminders

**5.2 Analytics and Reporting**
- [ ] Implement analytics dashboard:
  - Sales reports
  - Customer analytics
  - Product performance
  - Export functionality (CSV/PDF)
  - Custom date ranges

**5.3 Real-time Features**
- [ ] Add real-time notifications:
  - New order alerts
  - Low stock notifications
  - Customer support chat
  - Live order tracking

**5.4 Search and Performance**
- [ ] Implement advanced search:
  - Product search with filters
  - Search suggestions
  - Search analytics
- [ ] Performance optimization:
  - Image optimization
  - Caching strategies
  - API optimization
  - Lazy loading

#### Phase 6: Testing and Deployment [ ]

**6.1 Testing**
- [ ] Unit tests for components
- [ ] Integration tests for API routes
- [ ] E2E tests for critical flows
- [ ] Performance testing

**6.2 Security and Deployment**
- [ ] Security audit and fixes
- [ ] Environment configuration
- [ ] CI/CD pipeline setup
- [ ] Production deployment
- [ ] Monitoring and logging

#### Phase 7: Documentation [ ]

**7.1 Technical Documentation**
- [ ] API documentation
- [ ] Database schema documentation
- [ ] Component library documentation
- [ ] Deployment guide

**7.2 User Documentation**
- [ ] Admin user guide
- [ ] Customer help center
- [ ] FAQ section
- [ ] Video tutorials

### Development Guidelines

**Code Organization:**
- Use TypeScript for type safety
- Implement proper error handling
- Follow Next.js 15 best practices
- Use server components where possible
- Implement proper loading states

**State Management:**
- Use Zustand for client-side state
- Use server state for data fetching
- Implement optimistic updates

**UI/UX:**
- Follow Shadcn UI design system
- Ensure responsive design
- Implement proper accessibility
- Use Lucide icons consistently

**Security:**
- Validate all inputs with Zod
- Implement proper authentication
- Secure API routes
- Handle sensitive data properly